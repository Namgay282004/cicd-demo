# Alternative Enhanced GitHub Actions workflow with fixed action versions
# This file demonstrates working Snyk configuration with stable action versions
name: Enhanced CI/CD with Comprehensive Security (Fixed)

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  schedule:
    # Run security scan every Monday at 2 AM UTC
    - cron: "0 2 * * 1"
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode for troubleshooting'
        required: false
        default: false
        type: boolean
      severity_threshold:
        description: 'Severity threshold (low, medium, high, critical)'
        required: false
        default: 'high'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  # Detect changes to optimize workflow execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - '!src/test/**'
            dependencies:
              - 'pom.xml'
              - '.snyk'
            docker:
              - 'Dockerfile'
              - 'dockerrun.aws.json'

  # Build and test job
  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Run unit tests
        run: mvn -B test --file pom.xml

      - name: Generate test coverage report
        run: mvn jacoco:report

      - name: Upload coverage reports (optional)
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

  # Comprehensive security scanning with matrix strategy
  security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule')

    strategy:
      fail-fast: false
      matrix:
        scan-type: [dependencies, code]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better change detection
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Cache Snyk dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/snyk
            ~/.snyk
          key: snyk-cache-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            snyk-cache-${{ runner.os }}-

      - name: Build project (required for comprehensive scanning)
        run: mvn clean compile -DskipTests

      - name: Debug Snyk environment
        run: |
          echo "🔍 Environment debugging for Snyk scan"
          echo "Matrix scan type: ${{ matrix.scan-type }}"
          echo "Working directory: $(pwd)"
          echo "Available files:"
          ls -la
          echo "Maven dependencies:"
          mvn dependency:tree || echo "Failed to list dependencies"

      - name: Install Snyk CLI
        run: |
          echo "📦 Installing Snyk CLI..."
          npm install -g snyk
          snyk --version

      - name: Authenticate with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Dependency Scan
        if: matrix.scan-type == 'dependencies'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔍 Running Snyk dependency scan..."
          
          # Enhanced scan with configurable severity threshold
          SEVERITY_THRESHOLD="${{ vars.SNYK_SEVERITY_THRESHOLD || inputs.severity_threshold || 'high' }}"
          echo "Using severity threshold: $SEVERITY_THRESHOLD"
          
          # Generate reports in multiple formats
          if ! snyk test --maven \
            --severity-threshold=$SEVERITY_THRESHOLD \
            --sarif-file-output=snyk-dependencies.sarif \
            --json-file-output=snyk-dependencies.json; then
            echo "⚠️ Snyk test found vulnerabilities, but continuing with report generation..."
          fi
          
          # Show summary of vulnerabilities found
          if [ -f "snyk-dependencies.json" ]; then
            echo "📊 Vulnerability summary:"
            echo "Found $(cat snyk-dependencies.json | jq -r '.vulnerabilities | length // 0') vulnerabilities"
          fi

      - name: Run Snyk Code Security Scan (SAST)
        if: matrix.scan-type == 'code'
        continue-on-error: true
        timeout-minutes: 15
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔍 Running Snyk code scan..."
          
          # Enhanced code scan with timeout and better error handling
          CODE_SEVERITY_THRESHOLD="${{ vars.SNYK_CODE_SEVERITY_THRESHOLD || inputs.severity_threshold || 'high' }}"
          echo "Using code severity threshold: $CODE_SEVERITY_THRESHOLD"
          
          # Run code analysis
          if ! snyk code test \
            --severity-threshold=$CODE_SEVERITY_THRESHOLD \
            --sarif-file-output=snyk-code.sarif \
            --json-file-output=snyk-code.json; then
            echo "⚠️ Snyk code test found issues, but continuing with report generation..."
          fi
          
          # Show summary of code issues found
          if [ -f "snyk-code.json" ]; then
            echo "📊 Code security issues summary generated"
          fi

      - name: Check if SARIF file was generated
        id: check-sarif
        run: |
          SARIF_FILE="snyk-${{ matrix.scan-type }}.sarif"
          if [ -f "$SARIF_FILE" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "✅ SARIF file found: $SARIF_FILE"
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "❌ SARIF file not found: $SARIF_FILE"
            echo "Available files:"
            ls -la *.sarif 2>/dev/null || echo "No SARIF files found"
          fi

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-sarif.outputs.sarif-exists == 'true'
        continue-on-error: true
        with:
          sarif_file: snyk-${{ matrix.scan-type }}.sarif
          category: snyk-${{ matrix.scan-type }}

      - name: Archive security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-${{ matrix.scan-type }}-results
          path: |
            snyk-${{ matrix.scan-type }}.sarif
            snyk-${{ matrix.scan-type }}.json
          retention-days: 30

  # Container security scanning
  container-security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build application JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t cicd-demo:${{ github.sha }} .
          docker tag cicd-demo:${{ github.sha }} cicd-demo:latest

      - name: Install Snyk CLI for container scan
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Container Scan
        continue-on-error: true
        timeout-minutes: 15
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          CONTAINER_SEVERITY_THRESHOLD="${{ vars.SNYK_CONTAINER_SEVERITY_THRESHOLD || inputs.severity_threshold || 'critical' }}"
          echo "Running container scan with severity threshold: $CONTAINER_SEVERITY_THRESHOLD"
          
          snyk container test cicd-demo:latest \
            --severity-threshold=$CONTAINER_SEVERITY_THRESHOLD \
            --file=dockerfile \
            --exclude-base-image-vulns \
            --sarif-file-output=snyk-container.sarif \
            --json-file-output=snyk-container.json || echo "Container scan completed with findings"

      - name: Upload container scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: snyk-container.sarif
          category: snyk-container

      - name: Archive container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-container-results
          path: |
            snyk-container.sarif
            snyk-container.json
          retention-days: 30

  # Monitor deployed dependencies (only on main branch)
  monitor:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build project (required for monitoring)
        run: mvn clean compile -DskipTests

      - name: Install Snyk CLI
        run: |
          echo "📦 Installing Snyk CLI for monitoring..."
          npm install -g snyk
          snyk --version
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Monitor project with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "📊 Monitoring project dependencies with Snyk..."
          
          # Monitor the project for ongoing vulnerability tracking
          snyk monitor --maven \
            --project-name="${{ github.repository }}-production" \
            --target-reference="${{ github.ref }}" \
            --remote-repo-url="${{ github.server_url }}/${{ github.repository }}.git" \
            || echo "⚠️ Monitoring completed with warnings (this is normal)"

  # Debug job for troubleshooting Snyk issues
  debug-snyk:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.debug_mode == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build project for debugging
        run: mvn clean compile -DskipTests

      - name: Install Snyk CLI with debugging
        run: |
          echo "📦 Installing Snyk CLI for debugging..."
          npm install -g snyk
          snyk --version
          echo "Snyk CLI installed successfully"

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔐 Authenticating with Snyk..."
          snyk auth ${{ secrets.SNYK_TOKEN }}
          echo "Authentication completed"

      - name: Debug Snyk Maven scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          DEBUG: "snyk"
        run: |
          echo "🔍 Running Snyk debug scan..."
          echo "Working directory: $(pwd)"
          echo "Java version: $(java -version)"
          echo "Maven version: $(mvn -version)"
          echo "Available files:"
          ls -la
          
          echo "Maven dependencies tree:"
          mvn dependency:tree || echo "Failed to get dependency tree"
          
          echo "Running Snyk test with debug..."
          snyk test --maven \
            --severity-threshold=${{ inputs.severity_threshold || 'high' }} \
            --debug \
            --print-deps || echo "Snyk test completed with issues"

      - name: Debug Snyk Code scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          DEBUG: "snyk"
        run: |
          echo "🔍 Running Snyk Code debug scan..."
          
          echo "Source code structure:"
          find src -type f -name "*.java" | head -20
          
          echo "Running Snyk Code test with debug..."
          snyk code test \
            --severity-threshold=${{ inputs.severity_threshold || 'high' }} \
            --debug || echo "Snyk code test completed with issues"

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [test, security, container-security]
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scans | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab in your repository for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
